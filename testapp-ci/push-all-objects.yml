# external tasks used
# https://raw.githubusercontent.com/tektoncd/catalog/master/task/git-cli/0.1/git-cli.yaml
# https://raw.githubusercontent.com/tektoncd/catalog/master/task/buildah/0.1/buildah.yaml
# https://raw.githubusercontent.com/tektoncd/catalog/master/task/git-clone/0.2/git-clone.yaml
# https://raw.githubusercontent.com/tektoncd/catalog/master/task/sonarqube-scanner/0.1/sonarqube-scanner.yaml
# oc secrets link pipeline basic-user-pass -n testapp-ci
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerBinding
metadata:
  name: testapp-build-and-deploy
spec:
  params:
    - name: SOURCE_GIT_URL
      value: $(body.repository.clone_url)
    - name: REVISION
      value: $(body.commits[0].id)
    - name: SERVICE_ACCOUNT
      value: pipeline
    - name: HELM_GIT_URL
      value: https://repository-gitea.apps-crc.testing/jblaine/testapp-helm.git
    - name: SONARQUBE_URL
      value: http://sonarqube-sonarqube.apps-crc.testing
    - name: CI_NAMESPACE
      value: testapp-ci
    - name: DEV_NAMESPACE
      value: testapp-dev
    - name: PR_NAMESPACE
      value: testapp-pr
    - name: QA_NAMESPACE
      value: testapp-qa
    - name: DEPLOYMENT
      value: testapp
    - name: REGISTRY_HOST
      value: image-registry.openshift-image-registry.svc:5000
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: TriggerTemplate
metadata:
  name: testapp-build-and-deploy
spec:
  params:
    - name: SOURCE_GIT_URL
      description: >-
        The repository url to source to build and deploy.
    - name: REVISION
      description: >-
        The revision to build and deploy.
    - name: SERVICE_ACCOUNT
      description: >-
        The ServiceAccount under which to run the Pipeline.
    - name: HELM_GIT_URL
      description: >-
        The repository containing the helm artifacts for the app.
    - name: SONARQUBE_URL
      description: >-
        Sonarqube code scanner endpoint.
    - name: CI_NAMESPACE
      description: >-
        Namespace where tekton artifacts for the pipeline reside.
    - name: DEV_NAMESPACE
      description: >-
        Target dev namespace to deploy if pipeline succeeds.
    - name: PR_NAMESPACE
      description: >-
        Namespace where image is deployed at pull request creation.
    - name: QA_NAMESPACE
      description: >-
        Target qa namespace to deploy if pipeline succeeds and PR is approved.
    - name: DEPLOYMENT
    - name: REGISTRY_HOST
  resourcetemplates:
    - apiVersion: tekton.dev/v1beta1
      kind: PipelineRun
      metadata:
        generateName: testapp-build-and-deploy-
      spec:
        serviceAccountName: $(tt.params.SERVICE_ACCOUNT)
        pipelineRef:
          name: build-and-deploy-openshift
        workspaces:
          - name: testapp-ci-source
            persistentVolumeClaim:
              claimName: testapp-ci-source
          - name: testapp-ci-helm
            persistentVolumeClaim:
              claimName: testapp-ci-helm
          - name: input
            emptyDir: {}
          - name: sonar-settings
            emptyDir: {}
        params:
          - name: SOURCE_GIT_URL
            value: $(tt.params.SOURCE_GIT_URL)
          - name: REVISION
            value: $(tt.params.REVISION)
          - name: SERVICE_ACCOUNT
            value: $(tt.params.SERVICE_ACCOUNT)
          - name: HELM_GIT_URL
            value: $(tt.params.HELM_GIT_URL)
          - name: SONARQUBE_URL
            value: $(tt.params.SONARQUBE_URL)
          - name: CI_NAMESPACE
            value: $(tt.params.CI_NAMESPACE)
          - name: DEV_NAMESPACE
            value: $(tt.params.DEV_NAMESPACE)
          - name: PR_NAMESPACE
            value: $(tt.params.PR_NAMESPACE)
          - name: QA_NAMESPACE
            value: $(tt.params.QA_NAMESPACE)
          - name: DEPLOYMENT
            value: $(tt.params.DEPLOYMENT)
          - name: REGISTRY_HOST
            value: $(tt.params.REGISTRY_HOST)
          - name: CI_IMAGE_URL
            value: $(tt.params.REGISTRY_HOST)/$(tt.params.CI_NAMESPACE)/$(tt.params.DEPLOYMENT):$(tt.params.REVISION)
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: build-and-deploy-openshift
spec:
  params:
    - name: SOURCE_GIT_URL
    - name: HELM_GIT_URL
    - name: SONARQUBE_URL
    - name: REVISION
    - name: CI_IMAGE_URL
    - name: CI_NAMESPACE
    - name: DEV_NAMESPACE
    - name: PR_NAMESPACE
    - name: QA_NAMESPACE
    - name: DEPLOYMENT
    - name: REGISTRY_HOST
  workspaces:
    - name: testapp-ci-source
    - name: testapp-ci-helm
    - name: input
    - name: sonar-settings
  tasks:
    ############################################
    - name: git-clone-source
      taskRef:
        kind: Task
        name: git-clone
      workspaces:
        - name: output
          workspace: testapp-ci-source
      params:
        - name: url
          value: $(params.SOURCE_GIT_URL)
        - name: revision
          value: $(params.REVISION)
        - name: sslVerify
          value: 'false'
        - name: depth
          value: "2147483647"
    ############################################
    - name: sonarqube-scanner
      taskRef:
        name: sonarqube-scanner
      runAfter:
        - git-clone-source
      params:
        - name: SONAR_HOST_URL
          value: $(params.SONARQUBE_URL)
        - name: SONAR_PROJECT_KEY
          value: $(params.DEPLOYMENT)
      workspaces:
        - name: source-dir
          workspace: testapp-ci-source
        - name: sonar-settings
          workspace: sonar-settings
    ############################################
    - name: buildah
      taskRef:
        name: buildah
      runAfter:
        - sonarqube-scanner
      workspaces:
        - name: source
          workspace: testapp-ci-source
      params:
        - name: IMAGE
          value: $(params.CI_IMAGE_URL)
        - name: TLSVERIFY
          value: 'false'
    ############################################
    - name: test-service-response
      taskRef:
        name: curl-tests
      runAfter:
        - buildah
      params:
        - name: revision
          value: $(params.REVISION)
        - name: reverseWordRequest
          value: PALC # Test input string to service
        - name: wordResponse
          value: CLAP # Expected string in service response
        - name: ciImageUrl
          value: $(params.CI_IMAGE_URL)
    ############################################
    - name: tag-images
      taskRef:
        name: openshift-client
        kind: ClusterTask
      runAfter:
        - test-service-response
      params:
        - name: SCRIPT
          value: |
            oc tag $(params.CI_NAMESPACE)/$(params.DEPLOYMENT):$(params.REVISION) $(params.DEV_NAMESPACE)/$(params.DEPLOYMENT):$(params.REVISION)
            oc tag $(params.CI_NAMESPACE)/$(params.DEPLOYMENT):$(params.REVISION) $(params.QA_NAMESPACE)/$(params.DEPLOYMENT):$(params.REVISION)
            oc tag $(params.CI_NAMESPACE)/$(params.DEPLOYMENT):$(params.REVISION) $(params.PR_NAMESPACE)/$(params.DEPLOYMENT):$(params.REVISION)
      conditions:
        - conditionRef: "verify-curl-tests-passed"
          params:
            - name: "testResults"
              value: "$(tasks.test-service-response.results.REVERSE_RESULT)"
    ############################################
    - name: git-clone-helm
      taskRef:
        kind: Task
        name: git-clone
      runAfter:
        - tag-images
      workspaces:
        - name: output
          workspace: testapp-ci-helm
      params:
        - name: url
          value: $(params.HELM_GIT_URL)
        - name: revision
          value: main
        - name: sslVerify
          value: 'false'
    ############################################
    - name: update-helm-values-dev
      taskRef:
        name: sed-commands
      runAfter:
        - git-clone-helm
      workspaces:
        - name: source
          workspace: testapp-ci-helm
      params:
        - name: imageUrlWithSha
          value: $(params.REGISTRY_HOST)/$(params.DEV_NAMESPACE)/$(params.DEPLOYMENT)@$(tasks.buildah.results.IMAGE_DIGEST)
        - name: pathToYamlFile
          value: $(workspaces.source.path)/values-dev.yaml
        - name: revision
          value: $(params.REVISION)
    ############################################
    - name: push-dev-values
      taskRef:
        name: git-cli
      runAfter:
        - update-helm-values-dev
      workspaces:
        - name: source
          workspace: testapp-ci-helm
        - name: input
          workspace: input
      params:
        - name: GIT_USER_NAME
          value: jblaine
        - name: GIT_USER_EMAIL
          value: tekton@test.com
        - name: GIT_SCRIPT
          value: |
            git config --global http.sslVerify false
            git checkout main
            git add -A
            git commit -m 'tekton update dev helm values'
            git push origin main
    ############################################
    # Must tag the image in the pr namespace so it can be located as part of the
    # pr open pipeline.  We join it back to the merge_base field in the pr open webhook payload
    - name: tag-pr-image-with-git-sha
      taskRef:
        name: openshift-client
        kind: ClusterTask
      runAfter:
        - push-dev-values
      params:
        - name: SCRIPT
          value: |
            oc tag $(params.PR_NAMESPACE)/$(params.DEPLOYMENT):$(params.REVISION) $(params.PR_NAMESPACE)/$(params.DEPLOYMENT):$(tasks.push-dev-values.results.commit)
    ############################################
    - name: update-helm-values-qa
      taskRef:
        name: sed-commands
      runAfter:
        - push-dev-values
      workspaces:
        - name: source
          workspace: testapp-ci-helm
      params:
        - name: imageUrlWithSha
          value: $(params.REGISTRY_HOST)/$(params.QA_NAMESPACE)/$(params.DEPLOYMENT)@$(tasks.buildah.results.IMAGE_DIGEST)
        - name: pathToYamlFile
          value: $(workspaces.source.path)/values-qa.yaml
        - name: revision
          value: $(params.REVISION)
    ############################################
    - name: create-pr-to-update-qa-values
      taskRef:
        name: git-cli
      runAfter:
        - update-helm-values-qa
      workspaces:
        - name: source
          workspace: testapp-ci-helm
        - name: input
          workspace: input
      params:
        - name: GIT_USER_NAME
          value: tekton
        - name: GIT_USER_EMAIL
          value: tekton@test.com
        - name: GIT_SCRIPT
          value: |
            git config --global http.sslVerify false
            git checkout -b tekton-pipeline-values-update
            git add -A
            git commit -m 'tekton update qa helm values'
            git push origin tekton-pipeline-values-update
---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: sed-commands
spec:
  description: >-
    Task to allow updating files.
  workspaces:
    - name: source
      description: The git repo will be cloned onto the volume backing this workspace
  params:
    - name: pathToYamlFile
      description: The path to the yaml file to deploy within the git source
    - name: imageUrlWithSha
      description: Url of image repository which contains sha256
    - name: revision
      description: app commit sha to be set as pod env variable
  steps:
    - name: cat-yaml-before
      image: registry.access.redhat.com/ubi8/ubi-minimal
      command: ["cat"]
      args:
        - "$(inputs.params.pathToYamlFile)"
    - name: update-image-value
      image: registry.access.redhat.com/ubi8/ubi-minimal
      command: ["sed"]
      args:
        - "-i"
        - "-e"
        # update the image field in the values file
        - "s;^image:.*;image: $(inputs.params.imageUrlWithSha);g"
        - "$(inputs.params.pathToYamlFile)"
    - name: update-release-value
      image: registry.access.redhat.com/ubi8/ubi-minimal
      command: ["sed"]
      args:
        - "-i"
        - "-e"
        # update the release field in the values file with git commit id
        - "s;^release:.*;release: $(inputs.params.revision);g"
        - "$(inputs.params.pathToYamlFile)"
    - name: cat-yaml-after
      image: registry.access.redhat.com/ubi8/ubi-minimal
      command: ["cat"]
      args:
        - "$(inputs.params.pathToYamlFile)"
---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: curl-tests
spec:
  description: >-
    Task to validate service responses.
  params:
    - name: revision
      description: app commit sha to be set as pod env variable
    - name: reverseWordRequest
    - name: wordResponse
    - name: ciImageUrl
  results:
    - name: REVERSE_RESULT
      description: The result of the reverse words operation
  steps:
    - name: curl-test
      image: registry.access.redhat.com/ubi8/ubi-minimal
      script: |
        INPUT_REQUEST='{"word":"$(inputs.params.reverseWordRequest)"}'
        EXPECTED_RESPONSE='{"reverse_word":"$(inputs.params.wordResponse)"}'
        SVC_REQUEST="curl -s http://127.0.0.1:8080/ -X POST -d $INPUT_REQUEST"
        API_RESPONSE=$($SVC_REQUEST)
        if [[ "$API_RESPONSE" == $EXPECTED_RESPONSE ]]; then
          printf curlTestPassed | tee /tekton/results/REVERSE_RESULT
        else
          printf curlTestFailed | tee /tekton/results/REVERSE_RESULT
        fi
  sidecars:
    - image: $(inputs.params.ciImageUrl)
      name: testapp
      env:
        - name: RELEASE
          value: $(inputs.params.revision)
---
apiVersion: tekton.dev/v1alpha1
kind: Condition
metadata:
  name: verify-curl-tests-passed
spec:
  params:
    - name: "testResults"
  check:
    image: registry.access.redhat.com/ubi8/ubi-minimal
    script: |
      #!/bin/sh
      if [[ "$(params.testResults)" == "curlTestPassed" ]]; then
        echo "$(params.testResults) == curlTestPassed"
        exit 0
      else
        echo "$(params.testResults)"
        exit 1
      fi
---
apiVersion: triggers.tekton.dev/v1alpha1
kind: EventListener
metadata:
  name: testapp
spec:
  serviceAccountName: pipeline
  triggers:
    - name: push-build-and-deploy
      interceptors:
        - cel:
            filter: >-
              header.match('X-GitHub-Event','push')
      bindings:
      - ref: testapp-build-and-deploy
      template:
        name: testapp-build-and-deploy
    - name: pr-open-deploy
      interceptors:
        - cel:
            filter: >-
              (body.action in ['opened']) && (header.match('X-GitHub-Event',
              'pull_request'))
      bindings:
      - ref: testapp-pr-open-deploy
      template:
        name: testapp-pr-open-deploy
    - name: pr-closed-cleanup
      interceptors:
        - cel:
            filter: >-
              (body.action in ['closed']) && (header.match('X-GitHub-Event',
              'pull_request'))
      bindings:
      - ref: testapp-pr-closed-cleanup
      template:
        name: testapp-pr-closed-cleanup
